<?php

namespace AssoMaker\PHPMBundle\Entity;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
//use Proxies\__CG__\AssoMaker\PHPMBundle\Entity\PlageHoraire;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * CreneauRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CreneauRepository extends EntityRepository {

    public function getCreneauxParJour($orga) {

        $entities = $this->getEntityManager()
                ->createQuery("
		SELECT c FROM AssoMakerPHPMBundle:Creneau c
		JOIN c.disponibilite d
		JOIN d.orga o
		WHERE d.orga = :orga_id
		 ")
                ->setParameter('orga_id', $orga->getId())
                ->getResult();



        $result = array();
        foreach ($entities as $entity) {
            $dow = $entity->getDebut()->format('w');

            $result[$dow][$entity->getId()] = $entity;
        }


        return $result;
    }

    public function getCreneauxParJour2($orga_id) {
        $conn = $this->_em->getConnection();
        //$orga_id=$orga->getId();

        $sql = "SELECT c.id, WEEKDAY(c.debut) d FROM Creneau c LEFT JOIN Disponibilite d ON c.disponibilite_id=d.id LEFT JOIN Orga o ON d.orga_id=o.id ";

        $rows = $conn->fetchAll($sql);

        foreach ($rows as $row) {
            var_dump($c);
            $co = $c[0];

            $a[$c['w']][$co->getId()] = $co;
            //$a[$c['w'][($c[0])->getId()]]=$c;
        }

        //$rows = $conn->prepare($sql)->execute();


        return $rows;
    }

    public function getCreneauxParJourNative($orga_id) {


        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('AssoMaker\PHPMBundle\Entity\Creneau', 'c');
        $rsm->addFieldResult('c', 'id', 'id');
        $rsm->addFieldResult('c', 'debut', 'debut');
        $rsm->addFieldResult('c', 'fin', 'fin');
        $rsm->addFieldResult('c', 'id', 'id');
        $rsm->addJoinedEntityResult("AssoMaker\\PHPMBundle\\Entity\\PlageHoraire", "p", "c", "plageHoraire");

        $rsm->addScalarResult('d', 'd');

        $query = $this->_em->createNativeQuery(
                'SELECT c.*, p.id as p_id, WEEKDAY(c.debut) d
		FROM Creneau c
		LEFT JOIN PlageHoraire p ON c.plageHoraire_id=p.id
		ORDER BY d', $rsm);


        $creneaux = $query->getResult();

        foreach ($creneaux as $c) {
            var_dump($c);
            $co = $c[0];

            $a[$c['w']][$co->getId()] = $co;
            //$a[$c['w'][($c[0])->getId()]]=$c;
        }

        return $a;
    }

    public function getCreneauxCompatibleWithCriteria($niveau_confiance, $permis, $equipe, $duree, $orga_id, $plage, $jour, $date_time) {
        // bien filtrer pour ne prendre que les tâches prêtes pour affectation (statut = 3)
        // viré le reliquat "confiance"
        $dql = 'SELECT c, eh, ehc FROM AssoMakerPHPMBundle:Creneau c JOIN c.plageHoraire p JOIN p.tache t JOIN t.groupeTache g JOIN g.equipe e LEFT JOIN c.equipeHint eh LEFT JOIN eh.confiance ehc
	     LEFT JOIN c.orgaHint oh WHERE c.disponibilite IS NULL AND t.statut = 3 ';

        if ($niveau_confiance !== '') {
            $valeurConfianceMin = $this->getEntityManager()->createQuery("SELECT c FROM AssoMakerBaseBundle:Confiance c WHERE c.id = $niveau_confiance")->getSingleResult()->getValeur();

            $dql .= "AND ehc.valeur = $valeurConfianceMin "; // comportement strict
        }

        if ($permis !== '') {
            $dql .= "AND t.permisNecessaire = $permis ";
        }

        if ($equipe !== '') {
            $dql .= "AND e.id = $equipe ";
        }

        // Filtre sur la durée, on utilise une fonction DQL custom
        // intval pour protéger notre code
        if ($duree !== '') {
            $dql .= 'AND (TIMEDIFF(c.debut, c.fin) <= ' . intval($duree) . ') '; // TIMEDIFF, fonction DQL custom, fait la différence en minutes
        }

        if ($plage !== '') {
            $pref = json_decode($this->getEntityManager()->getRepository('AssoMakerPHPMBundle:Config')->findOneByField('manifestation_plages')->getValue(), TRUE);
            $plage = $pref[$plage];
            $debut = $plage['debut'];
            $fin = $plage['fin'];

            // attention, Symfony2 prend le $jour 00:00:00 ! donc il faut ajouter 24h à la fin
            $dql .= "AND DATE_DIFF('$fin', c.debut) >= 0 AND DATE_DIFF(c.fin, '$debut') >= 0 ";
        }

        if ($jour !== '') {
            // $jour est automatiquement transformé en "$jour 00:00:00"
            // DQL n'implémente pas correctement DATE() (merci Doctrine de merde),
            // on regarde donc par rapport à l'intervalle $jour 00:00:00 et $jour+1 00:00:00
            // on ne s'intéresse qu'à l'heure de début (question de ne pas oublier de créneaux)
            $dql.= "AND (c.debut >= '" . $jour->format('Y-m-d') . "') AND (c.debut < '" . $jour->add(new \DateInterval('P1D'))->format('Y-m-d') . "') ";
        }

        if ($date_time !== '') {
            $dql.= "AND (c.debut <= '$date_time') AND (c.fin >= '$date_time') ";
        }

        if ($orga_id !== '') {
            $orga = $this->getEntityManager()->createQuery("SELECT o FROM AssoMakerBaseBundle:Orga o WHERE o.id = $orga_id")->getSingleResult();
            $equipe = $orga->getEquipe();

            // on est dans les dispos de l'orga
            $dql .= "AND (c.id IN
		    (SELECT cin.id FROM AssoMakerPHPMBundle:Creneau cin, AssoMakerBaseBundle:Orga oin JOIN oin.disponibilites doin
		    WHERE oin = $orga_id AND ((cin.debut >= doin.debut) AND (cin.fin <= doin.fin )))) ";

            // pas sur un créneau déjà affecté
            $dql .= "AND (c.id NOT IN
		    (SELECT ci.id FROM AssoMakerPHPMBundle:Creneau ci, AssoMakerBaseBundle:Orga o JOIN o.disponibilites do JOIN do.creneaux co
		    WHERE o = $orga_id AND ((ci.debut < co.fin) AND (ci.fin > co.debut )))) ";

            // Compatibilité équipe/niveau de confiance
            // On retourne les créneaux pour lesquels
            // 1 - L'orga est dans l'équipe equipeHint
            // OU 2 - l'orga a une confiance supérieure ou égale à celle de l'équipeHint
            $dql .= "AND ((c.orgaHint = $orga_id)OR((c.orgaHint IS NULL)AND(ehc.valeur < " . $equipe->getConfiance()->getValeur() . " OR c.equipeHint = " . $equipe->getId() . "))) ";

            // compatibilité avec le permis (ou non) de l'orga
            // commenté à la demande de l'humain 24
            /* if (!$orga->getDatePermis()) {
              $dql .= "AND t.permisNecessaire = -1 ";
              } else {
              // si on a une plage de définie, on utilise son 1er jour au lieu de la date !
              if (isset($debut)) {
              $now = new \DateTime($debut);
              } else {
              $now = new \DateTime();
              }

              $diff = $now->diff($orga->getDatePermis());// on calcule le nombre d'année du permis
              $dql .= 'AND t.permisNecessaire <= '.$diff->format('%y').' ';
              } */
        }

        // on dé-duplique
        $dql .= "GROUP BY c.plageHoraire, c.equipeHint, c.orgaHint, c.debut, c.fin ";

        // l'order se fait ici, plus optimisé !
        $dql .= "ORDER BY oh.id DESC, ehc.valeur DESC, c.debut ASC";

        $query = $this->getEntityManager()->createQuery($dql);

        return $query->getResult();
    }

    public function isCreneauGeneratedFor($tache_id, $ph_id){
        $query = $this->getEntityManager()->createQueryBuilder();
        $query->select('count(c.id)')
            ->from('AssoMakerPHPMBundle:Creneau','c')
            ->leftJoin('c.plageHoraire','ph')
            ->leftJoin('ph.tache','t')
            ->where('t.id = ?1')
            ->andWhere('ph.id = ?2')
            ->setParameters(array(1=>intval($tache_id),2=>intval($ph_id)));
        $query = $query->getQuery();
        return $query->getSingleScalarResult() != 0;
    }

    // récupère les créneaux d'une tache sur une plage donnée
    // le 1er paramètre est obligatoire
    public function getTacheCreneau($tache_id, $plage_id) {
        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('AssoMakerPHPMBundle:Creneau', 'c');
        $rsm->addFieldResult('c', 'id', 'id');
        $rsm->addFieldResult('c', 'debut', 'debut');
        $rsm->addFieldResult('c', 'fin', 'fin');
        $rsm->addMetaResult('c', 'did', 'did');
        $rsm->addMetaResult('c', 'eid', 'eid');
        $rsm->addMetaResult('c', 'oid', 'oid');
        $rsm->addJoinedEntityResult('AssoMakerPHPMBundle:PlageHoraire', 'p', 'c', 'plageHoraire');
        $rsm->addFieldResult('p', 'pi', 'id');
        $rsm->addJoinedEntityResult('AssoMakerPHPMBundle:Tache', 't', 'p', 'tache');
        $rsm->addFieldResult('t', 'ti', 'id');
        $rsm->addFieldResult('t', 'tn', 'nom');
        $rsm->addFieldResult('t', 'tl', 'lieu');

        $sql = 'SELECT c.id, c.debut, c.fin, c.disponibilite_id AS did, c.equipeHint_id AS eid, c.orgaHint_id AS oid, p.id AS pi, t.id AS ti, t.nom AS tn, t.lieu AS tl
				FROM Creneau c
				JOIN PlageHoraire p ON c.plageHoraire_id = p.id
				JOIN Tache t ON p.tache_id = t.id
				WHERE t.id = ?';

        if ($plage_id !== '') {
            $pref = json_decode($this->getEntityManager()->getRepository('AssoMakerPHPMBundle:Config')->findOneByField('manifestation_plages')->getValue(), TRUE);
            $plage = $pref[$plage_id];
            $fin = $plage["fin"];
            $debut = $plage["debut"];

            $sql .= " AND DATE(c.debut) <= DATE('$fin') AND DATE(c.fin) >= DATE('$debut')";
        }

        $sql .= ' GROUP BY c.debut, c.fin, eid, oid, (did IS NOT NULL)';

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter(1, $tache_id); // PDO \o/

        return $query->getArrayResult();
    }

    /**
     * Génère les Créneaux pour une Tâche donnée.
     * @param $tache_id int l'ID de la Tache.
     * @throws \Exception Dans le cas ou il est impossible de faire la génration
     */
    public function generateCreneauForTache($tache_id){
        $em = $this->getEntityManager();
        /** @var Tache $tache */
        $tache = $em->getRepository('AssoMakerPHPMBundle:Tache')->find($tache_id);

        /** @var PlageHoraire $ph */
        foreach ($tache->getPlagesHoraire() as $ph){
            $ph_id = $ph->getId();
            if(!$this->isCreneauGeneratedFor($tache_id,$ph_id)) { // On vérifie que ce n'est pas déjà généré
                $this->generateCreneauForPlageHoraire($ph_id);
            }
        }
    }

    /**
     * Génère les Créneaux pour une plage horaire donnée.
     * @param $plage_id int L'ID de la plage
     * @throws \Exception Dans le cas ou il est impossible de faire la génération.
     */
    public function generateCreneauForPlageHoraire($plage_id){
        $em = $this->getEntityManager();

        $entity = $em->getRepository('AssoMakerPHPMBundle:PlageHoraire')->find($plage_id);

        if (!$entity) {
            throw new NotFoundHttpException('Cette plage horaire n\'existe pas.');
        }
        if ($entity->getTache()->getStatut()<2){
            throw new \Exception("La tâche doit être validée");
        }

        // Géneration des créneaux
        if($entity->getCreneauUnique()){
            $this->genererCreneaux($entity,$entity->getDebut(),$entity->getFin(),$em);
        }else{
            $duree = $entity->getDureeCreneau();


            $debutCreneau = clone $entity->getDebut();
            $finCreneau = clone $entity->getDebut();
            $finCreneau->add(new \DateInterval('PT'.($duree + 1*$entity->getRecoupementCreneau()).'S'));

            $creationTerminee = false;

            while ($finCreneau <=$entity->getFin()){
                $this->genererCreneaux($entity,$debutCreneau,$finCreneau,$em);

                if($finCreneau >= $entity->getFin()){
                    $creationTerminee = true;
                }
                $debutCreneau = clone $debutCreneau;
                $debutCreneau->add(new \DateInterval('PT'.($duree).'S'));
                $finCreneau = clone $debutCreneau;
                $finCreneau->add(new \DateInterval('PT'.($duree + 1*$entity->getRecoupementCreneau()).'S'));

            }

            if(!$creationTerminee){
                $this->genererCreneaux($entity,$debutCreneau,$entity->getFin(),$em);
            }
        }

        $em->flush();
    }

    /**
     * Définie la façon de générer des créneaux à partir d'une plage horaire unique.
     * @param $plageHoraire PlageHoraire La plage horaire en question
     * @param $debut \DateTime Le début du créneau
     * @param $fin \DateTime La fin du créneau
     * @param $em EntityManager L'entity manager pour les modifications
     */
    private function genererCreneaux($plageHoraire,$debut,$fin,$em){
        foreach ($plageHoraire->getBesoinsOrga() as $besoinOrga){
            if($besoinOrga->getOrgaHint() == NULL){
                for ($i=0;$i<$besoinOrga->getNbOrgasNecessaires();$i++){
                    $creneau = new Creneau();
                    $creneau->setDebut($debut);
                    $creneau->setFin($fin);
                    $creneau->setPlageHoraire($plageHoraire);
                    $creneau->setEquipeHint($besoinOrga->getEquipe());
                    $em->persist($creneau);
                }
            }else{
                $creneau = new Creneau();
                $creneau->setDebut($debut);
                $creneau->setFin($fin);
                $creneau->setPlageHoraire($plageHoraire);
                $creneau->setOrgaHint($besoinOrga->getOrgaHint());
                $creneau->setEquipeHint($besoinOrga->getOrgaHint()->getEquipe());
                $em->persist($creneau);
            }

        }
        if($plageHoraire->getRespNecessaire()){
            $creneau = new Creneau();
            $creneau->setDebut($debut);
            $creneau->setFin($fin);
            $creneau->setPlageHoraire($plageHoraire);
            $creneau->setOrgaHint($plageHoraire->getTache()->getResponsable());
            $creneau->setEquipeHint($plageHoraire->getTache()->getGroupeTache()->getEquipe());
            $em->persist($creneau);
        }

    }

}
