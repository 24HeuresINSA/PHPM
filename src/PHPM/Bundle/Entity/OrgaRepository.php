<?php

namespace PHPM\Bundle\Entity;

use Doctrine\ORM\EntityRepository;
use PHPM\Bundle\Entity\Orga;
use PHPM\Bundle\Entity\Config;

/**
 * OrgaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrgaRepository extends EntityRepository
{
	public function getOrgasWithCriteria($annee_permis, $maxDateNaissance, $plage_id, $niveau_confiance, $equipe_id)
	{
		$dql = "SELECT o, SUM(di.pointsCharisme) charisme FROM PHPMBundle:Orga AS o JOIN o.disponibilitesInscription di JOIN o.disponibilites d JOIN o.equipe e WHERE o.statut=1";
		
 		if ($annee_permis !== '') {
 			if ($annee_permis == 0) {
 				$dql .= " AND o.datePermis IS NOT NULL";
 			} else if (is_numeric($annee_permis)) {
	 			$now = new \DateTime();
	 			$dql .= " AND o.datePermis <= '".$now->sub(new \DateInterval('P'.$annee_permis.'Y'))->format('Y-m-d')."'";
 			}
 		}
		
		// filtre sur la date de naissance
		$dql .= " AND o.dateDeNaissance <= '$maxDateNaissance'";
		
		if ($niveau_confiance !== '') {
			$dql .= " AND e.confiance = '$niveau_confiance'";
		}
		
		if ($plage_id !== '') {
			$pref = json_decode($this->getEntityManager()->getRepository('PHPMBundle:Config')->findOneByField('manifestation_plages')->getValue(),TRUE);
			$plage = $pref[$plage_id];
			$fin = $plage["fin"];
			$debut = $plage["debut"];
			$dql .= " AND d.debut < '$fin' AND d.fin > '$debut'";
		}
		
		if ($equipe_id !== '') {
			$dql .= " AND e.id = $equipe_id ";
		}
		
		// on trie par nombre de points de charisme
		$dql .= "GROUP BY o.id, d.id, e.id ORDER BY charisme DESC";
		
		$q = $this->getEntityManager()->createQuery($dql);
		return $q->execute();
	}


	// sort la liste des orgas compatibles avec un créneau
	public function getOrgasCompatibleWithCreneau($creneau_id)
	{
		// on regarde successivement :
		// s'il est dispo à ce moment-là
		// s'il a le bon niveau de confiance/équipe TODO
		// s'il n'est pas déjà affecté
		$dql = 	"SELECT o, SUM(di.pointsCharisme) charisme FROM PHPMBundle:Orga AS o JOIN o.disponibilites d " . 
				" JOIN o.disponibilitesInscription di JOIN o.equipe e, PHPMBundle:Creneau AS c LEFT OUTER JOIN c.orgaHint oh LEFT OUTER JOIN c.equipeHint eh " . 
				"WHERE c.id = '$creneau_id' AND (d.debut <= c.debut) AND (d.fin >= c.fin) " . 
				"AND (o.id = oh.id OR e.id = eh.id) " . 
				"AND o.id NOT IN (SELECT org.id FROM PHPMBundle:Creneau AS cr JOIN cr.disponibilite dis JOIN dis.orga org, " . 
				"PHPMBundle:Creneau cre WHERE cre.id = '$creneau_id' AND (cr.debut < cre.fin) AND (cr.fin > cre.debut)) " . 
				"GROUP BY o.id, d.id, e.id ORDER BY charisme DESC";
				
		$q = $this->getEntityManager()->createQuery($dql);
		return $q->execute();
	}
	
	public function getOrgasToValidate()
	{
	
		return $this->getEntityManager()
		->createQuery("SELECT o ,SUM(d.fin-d.debut)/3600 AS nbHeures FROM PHPMBundle:Orga o, PHPMBundle:Disponibilite d WHERE (d.orga = o AND o.statut=0)")
		
		->getResult();	
	
	
	}
	
	public function getStats(\PHPM\Bundle\Entity\Orga $orga)
	{
	
		
		$pcmax = $this->getEntityManager()
		->createQuery("SELECT sum(d.pointsCharisme)FROM PHPMBundle:DisponibiliteInscription d")
		
		->getSingleScalarResult();
		
		$totalpc = $this->getEntityManager()
		->createQuery("SELECT sum(d.pointsCharisme)FROM PHPMBundle:Orga o JOIN o.disponibilitesInscription d WHERE o.statut >=0")
		
		->getSingleScalarResult();
		
		
		$DIs = $this->getEntityManager()
		->createQuery("SELECT o  , sum(d.pointsCharisme) as pc FROM PHPMBundle:Orga o JOIN o.disponibilitesInscription d WHERE o.statut >=0 GROUP BY o.id ORDER BY pc DESC")
	
		->getResult();
		
		$nonValidated = $this->getEntityManager()
		->createQuery("SELECT count(o) FROM PHPMBundle:Orga o WHERE  o.statut =0")
		
		->getSingleScalarResult();
		
		$rang=1;
		$nbOrgas = count($DIs);
		
		foreach ($DIs as $row){
			$orgaDI=$row[0];
			$pc=$row['pc'];
			if ($orgaDI==$orga){
				return array('rangCharisme'=>$rang,'nbOrgas'=>$nbOrgas,'PCOrga'=>$pc,'PCTotal'=>$totalpc, 'PCMax'=>$pcmax,'nonValidated'=>$nonValidated)
				;
			}
			$rang++;
		}
		return(array('rangCharisme'=>-1,'nbOrgas'=>$nbOrgas,'PCOrga'=>0,'PCTotal'=>$totalpc,'PCMax'=>$pcmax,'nonValidated'=>$nonValidated));
	
	
	}
	
    public function getOrgasFromRegistration()
    {
    
        return $this->getEntityManager()
        ->createQuery("SELECT o FROM PHPMBundle:Orga o WHERE (o.statut=0)")
        
        ->getResult();  
    
    
    }
    
    public function getNombreOrgas() 
    {
        return $this->getEntityManager()
        ->createQuery("SELECT COUNT (o.id) AS nbOrgas FROM PHPMBundle:Orga o WHERE (o.statut=1)")   
        ->getResult();
    }
    
    public function getNombreHeureDesCreneauNonAffecte() 
    {
        return $this->getEntityManager()
        ->createQuery("SELECT SUM(c.fin-c.debut)/3600 AS nbHeures FROM PHPMBundle:Creneau c  WHERE (c.disponibilite is NULL)")   
        ->getResult();
    }
    
    public function getNombreHeureInscription($oid)
    {
        return number_format($this->getEntityManager()
        ->createQuery("SELECT SUM(d.fin-d.debut)/3600 AS nbHeures FROM PHPMBundle:Orga o JOIN o.disponibilitesInscription d")
        ->getSingleScalarResult(),1);
    }
   
   
    /*    Voir comment on peut récupérer le résultat d'une requête SQL en natif
           public function getTacheSansCreneau() 
    {
        
        /*
        return $this->getEntityManager()
        ->createQuery("SELECT t FROM PHPMBundle:Tache t WHERE (t.id = (SELECT p.tache FROM PHPMBundle:PlageHoraire WHERE (p.id NOT IN (SELECT c.plageHoraire FROM PHPMBundle:Creneau))")   
        ->getResult();
    
         
         
         $conn = $em->getConnection();
         
         $sql = "SELECT t FROM PHPMBundle:Tache t WHERE (t.id = (SELECT p.tache FROM PHPMBundle:PlageHoraire WHERE (p.id NOT IN (SELECT c.plageHoraire FROM PHPMBundle:Creneau))";
         
         $conn->query($sql);

         $conn->close();
    }
    
    */
    
	public function search($s)
	{
		return $this->getEntityManager()
		->createQuery("SELECT o FROM PHPMBundle:Orga o WHERE (o.nom LIKE :s OR o.prenom LIKE :s OR o.surnom LIKE :s OR o.telephone LIKE :s OR o.email LIKE :s OR o.commentaire LIKE :s) AND o.statut != '-1'")
		->setParameter('s', "%".$s."%")
		->getResult();	
	}
	
	public function findAllWithConfianceValueMin($value)
	{
	
		return  $this->createQueryBuilder('o')
		->join('o.equipe', 'e')
		->join('e.confiance', 'c')
		->where('c.valeur >= :value')
		->orderBy('o.nom')
		->setParameter('value', $value);
	
	
	
	}
	
	public function getPlanning($orga_id = 'all',\DateTime $debut, \DateTime $fin){
	
		
		if($orga_id == 'all'){
			return $this->getEntityManager()->createQuery("SELECT o,d,c,p,t,g,r,bm,m,c2,d2,o2 FROM PHPMBundle:Orga o JOIN o.disponibilites d JOIN d.creneaux c JOIN
					c.plageHoraire p JOIN p.tache t JOIN t.groupeTache g JOIN t.responsable r  LEFT JOIN t.besoinsMateriel bm LEFT JOIN bm.materiel m
					JOIN p.creneaux c2 JOIN c2.disponibilite d2 JOIN d2.orga o2 
					WHERE c.fin >= :debut AND c.debut <= :fin
					AND c2.debut = c.debut AND c2.fin = c.fin 
					ORDER BY o.nom,d.debut, c.debut")
					->setParameter('debut', $debut->format('Y-m-d H:i:s'))
					->setParameter('fin', $fin->format('Y-m-d H:i:s'))
					->getArrayResult();
			
		}else{
			return  $this->getEntityManager()->createQuery("SELECT o,d,c,p,t,g,r,bm,m,c2,d2,o2 FROM PHPMBundle:Orga o JOIN o.disponibilites d JOIN d.creneaux c JOIN
					c.plageHoraire p JOIN p.tache t JOIN t.groupeTache g JOIN t.responsable r  LEFT JOIN t.besoinsMateriel bm LEFT JOIN bm.materiel m
					JOIN p.creneaux c2 JOIN c2.disponibilite d2 JOIN d2.orga o2 
					WHERE o.id = :oid AND c.fin >= :debut AND c.debut <= :fin
					AND c2.debut = c.debut AND c2.fin = c.fin
					ORDER BY o.nom,d.debut, c.debut")
					->setParameter('oid',$orga_id)
					->setParameter('debut', $debut->format('Y-m-d H:i:s'))
					->setParameter('fin', $fin->format('Y-m-d H:i:s'))
					->getArrayResult();
		}
	
	}
	
	
	
//	getOrgasWithCriteriaTache numéro 2 pour gérer le tache id
/*
public function getOrgasWithCompatibleTache($tache_id)
	{
		
		$qb = $this->getEntityManager()->createQueryBuilder();
		$expr = $qb->expr();
	
		$andx = $expr->andx(
		
		
		
		//$expr->eq('t.id',$tache_id),
		$expr->neq('t.id',$tache_id),
		
		$expr->eq('d.orga','o'),
		$expr->neq('d.orga','0'),
		$expr->eq('co.disponibilite','d'),
		$expr->eq('ct.plageHoraire','p'),
		$expr->eq('p.tache','t')
		
		
		$expr->eq('ct.disponibilite','0'),
		$expr->lte('ct.debut','d.fin'),
		$expr->gte('ct.fin','d.debut'),
		
				'ct.id NOT IN (SELECT ci.id FROM PHPMBundle:Creneau ci 
				WHERE 
				
				( (ci.debut < co.fin) AND (ci.fin > co.debut ) )
				OR
				(((ci.debut<p.debut)OR(ci.fin > p.fin))OR((ci.debut >= p.fin)OR(ci.fin <= p.debut)))
				
				)'
		
		
		);
		
		$qb
		->select('o,ct')
		
		->from('PHPMBundle:Orga','o')
		
		
		
		->from('PHPMBundle:Disponibilite', 'd')
		->from('PHPMBundle:Creneau', 'co')
		->from('PHPMBundle:PlageHoraire', 'p')
		->from('PHPMBundle:Tache', 't')
		->from('PHPMBundle:Creneau', 'ct')
		
		
		->where($andx);
		
		//exit(var_dump($qb->getQuery()->getDQL()));
		
		
		
		return $qb->getQuery()->getResult();
		
		
	}
//*/	
}